<?xml version="1.0" encoding="UTF-8"?>
<!--status，log4j2自身的日志级别，OFF>FATAL>ERROR>WARN>INFO>DEBUG>TRACE>ALL-->
<!--monitorInterval，重新读取配置文件的间隔时间，单位为秒-->
<Configuration status="OFF" monitorInterval="5">
    <!--Properties，属性（可选），用来定义常量，之后在其他配置项中通过${变量名}引用-->
    <!-- ==============================================公共配置 start============================================== -->
    <Properties>
        <!--sys:LOG_PATH 的值即为 获取logging.file.path的值-->
        <property name="LOG_HOME" value="${sys:LOG_PATH}"/>
        <!--
           - %d{yyyy-MM-dd HH:mm:ss.SSS} : 日志生成时间，输出格式为“年-月-日 时:分:秒.毫秒”
           - %p : 日志输出格式
           - %c : logger的名称
           - %m : 日志内容，即 logger.info("message")
           - %n : 换行符
           - %T : 线程号
           - %L : 日志输出所在行数
           - %M : 日志输出所在方法名
           %level，日志级别，比如FATAL、ERROR、WARN、INFO、DEBUG、RACE；
           %thread，线程名字；
           %l，位置信息，等同于%C.%M(%F:%L)；
           %C、%class，完整类名；
           %M、%method，方法名；
           %F、%file，文件名；
           %n，换行；
           -->
        <property name="CONSOLE_PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %highlight{%-5level}{ERROR=Bright RED, WARN=Bright Yellow, INFO=Bright Green, DEBUG=Bright Cyan, TRACE=Bright White} %logger{50} - %style{%msg}{bright,magenta}%n</property>
        <property name="DEFAULT_PATTERN">[%date{yyyy-MM-dd HH:mm:ss}] [%-5level] [%logger:%line]--%mdc{client} %msg%n</property>
        <property name="CHARSET">UTF-8</property>
        <!-- 日志默认同类型日志,多久生成一个新的日志文件,这个配置需要和filePattern结合使用;
               如果设置为1,filePattern是%d{yyyy-MM-dd}到天的格式,则间隔一天生成一个文件
               如果设置为12,filePattern是%d{yyyy-MM-dd-HH}到小时的格式,则间隔12小时生成一个文件 -->
        <property name="FILE_SIZE">10MB</property>
        <property name="FILE_SIZE">10MB</property>
        <property name="FILE_INDEX_MAX">30</property>
    </Properties>
    <!-- ==============================================公共配置 end============================================== -->

    <!--Appenders，输出源，用于定义日志输出的地方-->
    <Appenders>
        <!--控制台-->
        <Console name="CONSOLE-APPENDER" target="SYSTEM_OUT">
            <PatternLayout>
                <Pattern>${CONSOLE_PATTERN}</Pattern>
            </PatternLayout>
        </Console>

        <!--RollingRandomAccessFile，按照一定的规则滚动文件-->
        <!--name，指定Appender的名字-->
        <!--fileName，当前日志文件的路径和名字-->
        <!--filePattern，当发生滚动时，文件的转移和重命名规则-->
        <!-- DEBUG 配置-->
        <RollingRandomAccessFile name="DEBUG-APPENDER"
                                 fileName="${LOG_HOME}/debug.log"
                                 filePattern="${LOG_HOME}/%d{yyyyMMdd}/debug-%d{yyyyMMdd}-%i.log">
            <!--Filters，决定日志事件能否被输出：ACCEPT(接受)，DENY(拒绝)，NEUTRAL(中立)；onMatch-该级别及以上，onMismatch-该级别以下-->
            <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout>
                <Pattern>${DEFAULT_PATTERN}</Pattern>
            </PatternLayout>
            <Policies>

                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <SizeBasedTriggeringPolicy size="${FILE_SIZE}"/>
            </Policies>
            <DefaultRolloverStrategy max="${FILE_INDEX_MAX}"/>
        </RollingRandomAccessFile>

        <!-- INFO 配置-->
        <RollingRandomAccessFile name="INFO-APPENDER"
                                 fileName="${LOG_HOME}/info.log"
                                 filePattern="${LOG_HOME}/%d{yyyyMMdd}/info-%d{yyyyMMdd}-%i.log">
            <!--PatternLayout，日志输出的格式-->
            <PatternLayout>
                <Pattern>${DEFAULT_PATTERN}</Pattern>
            </PatternLayout>
            <!--Policies，日志文件滚动的策略-->
            <!--TimeBasedTriggeringPolicy，和filePattern结合使用，日期格式决定时间单位，interval决定单位时间间隔；modulate，产生文件是否以0点偏移时间-->
            <!--SizeBasedTriggeringPolicy，日志文件大小滚动策略-->
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <SizeBasedTriggeringPolicy size="${FILE_SIZE}"/>
            </Policies>
            <!--DefaultRolloverStrategy，默认滚动策略，max-日志文件保存的最多个数-->
            <DefaultRolloverStrategy max="${FILE_INDEX_MAX}"/>
        </RollingRandomAccessFile>


        <!-- WARN 配置-->
        <RollingRandomAccessFile name="WARN-APPENDER"
                                 fileName="${LOG_HOME}/warn.log"
                                 filePattern="${LOG_HOME}/%d{yyyyMMdd}/warn-%d{yyyyMMdd}-%i.log">
            <!--Filters，决定日志事件能否被输出：ACCEPT(接受)，DENY(拒绝)，NEUTRAL(中立)；onMatch-该级别及以上，onMismatch-该级别以下-->
            <ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout>
                <Pattern>${DEFAULT_PATTERN}</Pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <SizeBasedTriggeringPolicy size="${FILE_SIZE}"/>
            </Policies>
            <DefaultRolloverStrategy max="${FILE_INDEX_MAX}"/>
        </RollingRandomAccessFile>

        <!-- ERROR 配置-->
        <RollingRandomAccessFile name="ERROR-APPENDER"
                                 fileName="${LOG_HOME}/error.log"
                                 filePattern="${LOG_HOME}/%d{yyyyMMdd}/error-%d{yyyyMMdd}-%i.log">
            <!--Filters，决定日志事件能否被输出：ACCEPT(接受)，DENY(拒绝)，NEUTRAL(中立)；onMatch-该级别及以上，onMismatch-该级别以下-->
            <ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout>
                <Pattern>${DEFAULT_PATTERN}</Pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <SizeBasedTriggeringPolicy size="${FILE_SIZE}"/>
            </Policies>
            <DefaultRolloverStrategy max="${FILE_INDEX_MAX}"/>
        </RollingRandomAccessFile>
    </Appenders>

    <Loggers>
        <Root level="INFO">
            <AppenderRef ref="CONSOLE-APPENDER"/>
            <AppenderRef ref="INFO-APPENDER"/>
            <AppenderRef ref="ERROR-APPENDER"/>
        </Root>
        <!--每个配置都必须有一个Root logger，没有name属性、不支持additivity属性-->
        <!--level：日志输出级别，从低到高分别为：All<TRACE<DEBUG<INFO<WARN<ERROR<FATAL<OFF-->
        <!--includeLocation：输出位置信息需要栈快照，对性能影响很大，所以异步logger默认关闭该功能，可通过设置为true打开-->
        <!--AppenderRef：指定该日志输出到哪个Appender-->
<!--        <asyncRoot level="INFO" includeLocation="true">-->
<!--            <AppenderRef ref="CONSOLE-APPENDER"/>-->
<!--            <AppenderRef ref="INFO-APPENDER"/>-->
<!--            <AppenderRef ref="ERROR-APPENDER"/>-->
<!--        </asyncRoot>-->
        <!--name：该Logger所适用的类或者类所在的包路径-->
        <!--additivity：设置日志事件是否在Root logger输出，为避免重复输出，可设置为false-->
<!--        <asyncLogger name="com.wj.frame" level="INFO" additivity="false" includeLocation="true">-->
<!--            <AppenderRef ref="CONSOLE-APPENDER"/>-->
<!--            <AppenderRef ref="INFO-APPENDER"/>-->
<!--            <AppenderRef ref="ERROR-APPENDER"/>-->
<!--        </asyncLogger>-->
    </Loggers>
</Configuration>
